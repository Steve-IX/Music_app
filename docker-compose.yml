# Docker Compose Configuration for MusicStream Development
# Author: CodeSmith-Maestro
# Created: 2024

version: '3.8'

services:
  # Core Databases
  postgres:
    image: postgres:16-alpine
    container_name: musicstream-postgres
    environment:
      POSTGRES_DB: musicstream
      POSTGRES_USER: musicstream_admin
      POSTGRES_PASSWORD: dev_password_change_in_production
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - musicstream-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U musicstream_admin -d musicstream"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: musicstream-redis
    command: redis-server --requirepass dev_redis_password --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - musicstream-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: musicstream-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - cluster.name=musicstream-cluster
      - node.name=musicstream-node
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - musicstream-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Message Broker
  nats:
    image: nats:2.10-alpine
    container_name: musicstream-nats
    command: 
      - "--jetstream"
      - "--store_dir=/data"
      - "--max_memory_store=1GB"
      - "--max_file_store=10GB"
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - nats_data:/data
    networks:
      - musicstream-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Authentication Provider
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: musicstream-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin_password_change_in_production
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: musicstream_admin
      KC_DB_PASSWORD: dev_password_change_in_production
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    command: start-dev
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./docker/keycloak/themes:/opt/keycloak/themes
      - ./docker/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    networks:
      - musicstream-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10

  # Microservices
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile.dev
    container_name: musicstream-auth
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://musicstream_admin:dev_password_change_in_production@postgres:5432/musicstream
      REDIS_URL: redis://:dev_redis_password@redis:6379
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: musicstream
      JWT_SECRET: super_secret_jwt_key_change_in_production
      NATS_URL: nats://nats:4222
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./services/auth:/app
      - /app/node_modules
    networks:
      - musicstream-network
    restart: unless-stopped

  library-service:
    build:
      context: ./services/library
      dockerfile: Dockerfile.dev
    container_name: musicstream-library
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://musicstream_admin:dev_password_change_in_production@postgres:5432/musicstream
      REDIS_URL: redis://:dev_redis_password@redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      NATS_URL: nats://nats:4222
      S3_BUCKET: musicstream-dev-content
      S3_REGION: us-east-1
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./services/library:/app
      - /app/node_modules
    networks:
      - musicstream-network
    restart: unless-stopped

  stream-service:
    build:
      context: ./services/stream
      dockerfile: Dockerfile.dev
    container_name: musicstream-stream
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgresql://musicstream_admin:dev_password_change_in_production@postgres:5432/musicstream
      REDIS_URL: redis://:dev_redis_password@redis:6379
      NATS_URL: nats://nats:4222
      S3_BUCKET: musicstream-dev-content
      S3_REGION: us-east-1
      CLOUDFRONT_DOMAIN: localhost
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./services/stream:/app
      - /app/node_modules
      - ./docker/audio-samples:/app/audio-samples:ro
    networks:
      - musicstream-network
    restart: unless-stopped

  recommendations-service:
    build:
      context: ./services/recommendations
      dockerfile: Dockerfile.dev
    container_name: musicstream-recommendations
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgresql://musicstream_admin:dev_password_change_in_production@postgres:5432/musicstream
      REDIS_URL: redis://:dev_redis_password@redis:6379
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: dev_neo4j_password
      NATS_URL: nats://nats:4222
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./services/recommendations:/app
      - /app/node_modules
    networks:
      - musicstream-network
    restart: unless-stopped

  social-service:
    build:
      context: ./services/social
      dockerfile: Dockerfile.dev
    container_name: musicstream-social
    environment:
      NODE_ENV: development
      PORT: 3005
      DATABASE_URL: postgresql://musicstream_admin:dev_password_change_in_production@postgres:5432/musicstream
      REDIS_URL: redis://:dev_redis_password@redis:6379
      NATS_URL: nats://nats:4222
      WEBSOCKET_PORT: 3006
    ports:
      - "3005:3005"
      - "3006:3006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./services/social:/app
      - /app/node_modules
    networks:
      - musicstream-network
    restart: unless-stopped

  # Graph Database for Recommendations
  neo4j:
    image: neo4j:5.13-community
    container_name: musicstream-neo4j
    environment:
      NEO4J_AUTH: neo4j/dev_neo4j_password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_db_memory_heap_initial__size: 512m
      NEO4J_db_memory_heap_max__size: 2G
      NEO4J_db_memory_pagecache_size: 1G
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - musicstream-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "dev_neo4j_password", "RETURN 1"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Frontend Applications
  web-app:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.dev
    container_name: musicstream-web
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3000
      VITE_WS_URL: ws://localhost:3006
      VITE_KEYCLOAK_URL: http://localhost:8080
      VITE_KEYCLOAK_REALM: musicstream
      VITE_KEYCLOAK_CLIENT_ID: musicstream-web
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    networks:
      - musicstream-network
    restart: unless-stopped

  # API Gateway / Load Balancer
  nginx:
    image: nginx:alpine
    container_name: musicstream-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/ssl:/etc/ssl/certs
    depends_on:
      - auth-service
      - library-service
      - stream-service
      - recommendations-service
      - social-service
      - web-app
    networks:
      - musicstream-network
    restart: unless-stopped

  # Monitoring & Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: musicstream-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - musicstream-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: musicstream-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin_password
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - musicstream-network
    restart: unless-stopped

  # Local S3 Compatible Storage
  minio:
    image: minio/minio:latest
    container_name: musicstream-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - musicstream-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Development Tools
  mailhog:
    image: mailhog/mailhog:latest
    container_name: musicstream-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - musicstream-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: musicstream-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:dev_redis_password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - musicstream-network

networks:
  musicstream-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  nats_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local